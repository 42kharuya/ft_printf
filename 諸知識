⚪va_listについて
C言語で可変長引数の関数を作成する際に利用される型
-----------------------------------------------------------------------------------------------
va_start関数:可変引数の処理を開始（初期化作業）
            C言語で可変長引数の関数を作成する際に必ず最初に呼び出すマクロ
			型:void va_start(va_list ap, last_arg);
			ap:va_list型の変数。引数リストへのアクセスに使用される。
			last_arg:可変個引数の直前の固定引数の名前
-----------------------------------------------------------------------------------------------
va_arg関数:可変引数のリストから、次の指定された型の引数を取得するマクロ
            int va_arg(va_list ap, type);
            ap:va_startで初期化されたva_list型の変数
            type:取り出す引数の型。int,double,charなど任意の型を指定できる
-----------------------------------------------------------------------------------------------
va_copy関数:va_list型の変数の内容をコピーするマクロ
			void va_copy(va_list dest, va_list src);
			dest:コピー先のva_list型の変数
			src:コピー元のva_list型の変数
-----------------------------------------------------------------------------------------------
va_end関数:可変引数の処理を終了（メモリ解放）
			void va_end(va_list ap);
			ap:va_startで初期化されたva_list型の変数

-----------------------------------------------------------------------------------------------
<指定子>
%c:char
%s:char*
%p:引数をvoid *とみなして、そのポインタのアドレス値を16進数で返す
%d:int
%i:int
%u:unsigned int(10進数)
%x,X:unsigned int(16進数)

-----------------------------------------------------------------------------------------------
<質問>
・ft_printf_charの関数でft_putchar関数ではなくft_putchar_fdであるのはなぜか

<コンパイルファイル一覧>
ccw test.c ft_printf.c ft_printf_char.c ft_printf_int.c ft_printf_str.c libft/ft_itoa.c libft/ft_putchar_fd.c libft/ft_putstr_fd.c ft_printf_u.c ft_printf_x.c ft_printf_p.c


-----------------------------------------------------------------------------------------------
各関数説明
<ft_printf_p>
・uintptr_tはポインタのアドレスを格納するために用いられる符号なし整数型
・char space[16 + 1]が16+1個分なのは64ビット環境ではuintptr_tは通常64ビット(８バイト)で表現されるため、16進数の場合の最大桁数は16桁になるため。